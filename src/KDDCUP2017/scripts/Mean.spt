scala -J-Xmx6g

val data = io.Source.fromFile("trajectories(table 5)_training.csv").getLines.drop(1).toArray
val links = data.map{
  line => 
    val travelNodes = line.filter(_ != '"').split(',').init.last.split(';')
    val nodeTimePairs = travelNodes.map{
      x => 
        val splits = x.split('#')
        splits.head -> splits.last
    }
    nodeTimePairs
}.flatten
// val nodeMeans = links.groupBy(_._1).toArray.map{
//   //nodeTravelCost
//   ntc =>
//     val ntcTime = ntc._2.map(_._2.toDouble)
//     val ntcAbs = ntcTime.sum / ntcTime.size
//     ntc._1 -> ntcAbs
// }

// nodeMeans:
// (100,8.136393182089028)
// (101,10.372190252867727)
// (102,11.06400660979174)
// (103,6.617253150844142)
// (104,29.758597842835005)
// (105,12.965021476139693)
// (106,2.6468609950626187)
// (107,5.047232005204851)
// (108,5.894220826970048)
// (109,10.931599599907637)
// (110,13.561090300908898)
// (111,31.23099482521922)
// (112,28.8684924702358)
// (113,25.318550323756863)
// (114,23.44632146848949)
// (115,10.97725163273147)
// (116,18.798303945198466)
// (117,35.89161878464689)
// (118,33.41758331901732)
// (119,1.2527127613802294)
// (120,1.0892520249747275)
// (121,19.14017162761228)
// (122,39.09898744933981)
// (123,7.057588984188489)

val nodeTravelCost = links.groupBy(_._1).toArray.map{
  //nodeTravelCost
  ntc =>
    val ntcTime = ntc._2.map(_._2.toDouble)
    ntc._1 -> ntcTime
}.sortBy(_._1)

val nodeInfo = nodeTravelCost.map{
  nif => 
    val nif_max = nif._2.max
    val nif_min = nif._2.min 
    val nif_mean = nif._2.sum / nif._2.size
    val nif_var = nif._2.map( x => math.pow((x - nif_mean),2) ).sum / nif._2.size
    (nif._1,nif_max,nif_min,nif_mean,nif_var)
}

// nodeInfo:
// (100,618.06,1.39,8.136393182089028,83.18235653275973)
// (101,266.23,2.02,10.372190252867727,90.28959920811607)
// (102,2220.47,3.15,11.06400660979174,423.85706442513657)
// (103,752.43,0.55,6.617253150844142,192.10698392574847)
// (104,747.24,7.04,29.758597842835005,474.01098727894293)
// (105,1183.12,1.88,12.965021476139693,213.0457054582229)
// (106,181.18,0.36,2.6468609950626187,40.3255374754228)
// (107,884.81,0.8,5.047232005204851,88.5119080253927)
// (108,526.96,0.96,5.894220826970048,69.39813682572101)
// (109,213.12,3.24,10.931599599907637,54.03190162686149)
// (110,1239.65,2.44,13.561090300908898,141.35909527005973)
// (111,552.33,2.91,31.23099482521922,796.3644782584018)
// (112,510.35,4.79,28.8684924702358,513.4784244560441)
// (113,867.02,3.46,25.318550323756863,526.6828365858063)
// (114,6604.98,4.76,23.44632146848949,2594.9191420397256)
// (115,941.39,2.57,10.97725163273147,128.78498596933798)
// (116,1516.58,4.33,18.798303945198466,319.01799591827495)
// (117,1417.33,3.26,35.89161878464689,1215.4871897282455)
// (118,1259.5,4.95,33.41758331901732,938.0020734716213)
// (119,504.65,0.22,1.2527127613802294,23.945236970157477)
// (120,528.98,0.14,1.0892520249747275,22.06969084704556)
// (121,663.33,2.84,19.14017162761228,365.0360547963806)
// (122,1455.76,4.74,39.09898744933981,1005.505532279729)
// (123,895.64,1.42,7.057588984188489,61.02003150596196)


// nodeTravelCost size :
// (100,25169)
// (101,15779)
// (102,13011)
// (103,37847)
// (104,12980)
// (105,25377)
// (106,15798)
// (107,70701)
// (108,70716)
// (109,12997)
// (110,70852)
// (111,37876)
// (112,12683)
// (113,15907)
// (114,23262)
// (115,13015)
// (116,15766)
// (117,47443)
// (118,23284)
// (119,23242)
// (120,47408)
// (121,15790)
// (122,45894)
// (123,70771)


val ntcCSVString = nodeTravelCost.map(x => x._1.toString + "," +  x._2.mkString(",")).mkString("\n")
val p = new java.io.PrintWriter("nodeTravelCost.csv")
p.write(ntcCSVString + "\n")
p.flush
p.close

